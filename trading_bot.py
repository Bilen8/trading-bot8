from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters
import yfinance as yf
from datetime import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø–æ–º–æ—â—å—é yfinance
def get_prediction(currency_pair):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è EURUSD)
    pair = yf.Ticker(f"{currency_pair}=X")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = pair.history(period="1d", interval="5m")

    if data.empty:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
    latest_data = data.iloc[-1]
    latest_price = latest_data['Close']
    open_price = latest_data['Open']
    high_price = latest_data['High']
    low_price = latest_data['Low']

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    prev_data = data.iloc[-2]
    prev_price = prev_data['Close']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    trend = "–í–≤–µ—Ä—Ö" if latest_price > prev_price else "–í–Ω–∏–∑"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
    result = f"""
    *–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {currency_pair}:*

    üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞:* {current_time}
    üíµ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* {latest_price} USD
    üî¥ *–û—Ç–∫—Ä—ã—Ç–∏–µ:* {open_price} USD
    üîº *–ú–∞–∫—Å–∏–º—É–º:* {high_price} USD
    üîΩ *–ú–∏–Ω–∏–º—É–º:* {low_price} USD

    üìä *–¢—Ä–µ–Ω–¥:* {trend}

    *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:* –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
def create_currency_keyboard():
    # –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    currency_pairs = ['EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CHF']

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    keyboard = [
        ['EUR/USD', 'GBP/USD'],
        ['USD/JPY', 'AUD/USD'],
        ['USD/CHF', 'USD/CAD'],
        ['–ù–∞–∑–∞–¥']  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
def create_main_keyboard():
    keyboard = [
        ['ACTIVE FIN', 'ACTIVE OTC'],
        ['–°–±—Ä–æ—Å']  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (–¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞)
def create_back_keyboard():
    keyboard = [
        ['–ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=create_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ ACTIVE FIN
async def active_fin(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=create_currency_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ ACTIVE OTC
async def active_otc(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "ACTIVE OTC –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
        reply_markup=create_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
async def forecast(update: Update, context: CallbackContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
    currency_pair = update.message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    if currency_pair == "–ù–∞–∑–∞–¥":
        await active_fin(update, context)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    prediction = get_prediction(currency_pair.replace('/', ''))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(prediction, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await update.message.reply_text(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
        reply_markup=create_back_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def reset(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=create_main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    token = '7932281147:AAFSQnt6gYDEtfreLgNlaJIpRyfpDeK4r9A'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    application.add_handler(MessageHandler(filters.Regex('^ACTIVE FIN$'), active_fin))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ACTIVE FIN
    application.add_handler(MessageHandler(filters.Regex('^ACTIVE OTC$'), active_otc))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ACTIVE OTC

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    application.add_handler(MessageHandler(filters.Regex(r'^(EUR/USD|GBP/USD|USD/JPY|AUD/USD|USD/CHF|–ù–∞–∑–∞–¥)$'), forecast))  # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å"
    application.add_handler(MessageHandler(filters.Regex('^–°–±—Ä–æ—Å$'), reset))  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()











